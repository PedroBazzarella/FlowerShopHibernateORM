/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package io.ifnmg.oop;

import io.ifnmg.oop.buque.Buque;
import io.ifnmg.oop.buque.BuqueRepository;
import io.ifnmg.oop.cliente.Cliente;
import io.ifnmg.oop.cliente.ClienteRepository;
import io.ifnmg.oop.embrulho.Embrulho;
import io.ifnmg.oop.embrulho.EmbrulhoRepository;
import io.ifnmg.oop.endereco.Endereco;
import io.ifnmg.oop.endereco.EnderecoRepository;
import io.ifnmg.oop.flor.Flor;
import io.ifnmg.oop.flor.FlorRepository;
import io.ifnmg.oop.funcionario.Funcionario;
import io.ifnmg.oop.funcionario.FuncionarioRepository;
import io.ifnmg.oop.pedido.Pedido;
import io.ifnmg.oop.pedido.PedidoRepository;
import io.ifnmg.oop.tamanhoBuque.TamanhoBuque;
import io.ifnmg.oop.tamanhoBuque.TamanhoBuqueRepository;

import javax.swing.*;
import javax.swing.DefaultListModel;
import java.util.Collections;
import java.util.List;

/**
 *
 * @author Waleska
 */
public class Listagem extends javax.swing.JFrame {

    private DefaultListModel<Object> listModel;

    /**
     * Creates new form Listagem
     */
    public Listagem() {
        initComponents();
        listModel = new DefaultListModel<>();
        listEntidade.setModel(listModel);

        // Permite que o usuário selecione múltiplos itens com Ctrl+Click ou Shift+Click
        listEntidade.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        comboxEntidade = new javax.swing.JComboBox<>();
        scrPnlListaEntidade = new javax.swing.JScrollPane();
        listEntidade = new JList<Object>();
        btnDelete = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Lista de Entidades");

        comboxEntidade.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Buquê", "Cliente", "Embrulho", "Endereço", "Flor", "Funcionário", "Pedido", "Tamanho buquê" }));
        comboxEntidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboxEntidadeActionPerformed(evt);
            }
        });

        scrPnlListaEntidade.setViewportView(listEntidade);

        btnDelete.setText("Excluir");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(comboxEntidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(scrPnlListaEntidade, javax.swing.GroupLayout.DEFAULT_SIZE, 368, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnDelete)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(comboxEntidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(scrPnlListaEntidade, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(btnDelete))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 6, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void comboxEntidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboxEntidadeActionPerformed
        atualizarLista();
    }//GEN-LAST:event_comboxEntidadeActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // Pega a lista de todos os objetos selecionados 
        List<Object> itensSelecionados = listEntidade.getSelectedValuesList();

        // Verifica se algo foi realmente selecionado
        if (itensSelecionados.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Nenhum item selecionado para exclusão.", "Aviso", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Pede confirmação ao usuário
        int resposta = JOptionPane.showConfirmDialog(
                this,
                "Tem certeza que deseja excluir os " + itensSelecionados.size() + " itens selecionados?",
                "Confirmação de Exclusão",
                JOptionPane.YES_NO_OPTION);

        if (resposta != JOptionPane.YES_OPTION) {
            return;
        }
        try {
            // Percorre cada objeto que foi selecionado
            for (Object item : itensSelecionados) {
                if (item instanceof Endereco) {
                    new EnderecoRepository().delete((Endereco) item);
                } else if (item instanceof Cliente) {
                    new ClienteRepository().delete((Cliente) item);
                } else if (item instanceof Buque) {
                    new BuqueRepository().delete((Buque) item);
                }else if (item instanceof Embrulho) {
                    new EmbrulhoRepository().delete((Embrulho) item);
                }else if (item instanceof Funcionario) {
                    new FuncionarioRepository().delete((Funcionario) item);
                }else if (item instanceof TamanhoBuque) {
                    new TamanhoBuqueRepository().delete((TamanhoBuque) item);
                }else if (item instanceof Flor) {
                    new FlorRepository().delete((Flor) item);
                }else if (item instanceof Pedido) {
                    new PedidoRepository().delete((Pedido) item);
                }
            }

            atualizarLista();

            JOptionPane.showMessageDialog(this, "Itens excluídos com sucesso!");

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Ocorreu um erro durante a exclusão: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void atualizarLista() {
        try {
            // Pega o item selecionado no ComboBox (convertido para String)
            String entidadeSelecionada = (String) comboxEntidade.getSelectedItem();

            // Limpa a lista antes de adicionar novos itens
            listModel.clear();
            // Usa um switch para decidir qual repositório chamar
            switch (entidadeSelecionada) {
                case "Buquê":
                    BuqueRepository buqueRepo = new BuqueRepository();
                    List<Buque> buques = buqueRepo.findAll();
                    // Adiciona cada objeto da lista ao modelo da JList
                    for (Buque item : buques) {
                        listModel.addElement(item);
                    }
                    break;

                case "Cliente":
                    ClienteRepository clienteRepo = new ClienteRepository();
                    List<Cliente> clientes = clienteRepo.findAll();
                    for (Cliente item : clientes) {
                        listModel.addElement(item);
                    }
                    break;

                case "Embrulho":
                    EmbrulhoRepository embrulhoRepo = new EmbrulhoRepository();
                    List<Embrulho> embrulhos = embrulhoRepo.findAll();
                    for (Embrulho item : embrulhos) {
                        listModel.addElement(item);
                    }
                    break;

                case "Endereço":
                    EnderecoRepository enderecoRepo = new EnderecoRepository();
                    List<Endereco> enderecos = enderecoRepo.findAll();
                    for (Endereco item : enderecos) {
                        listModel.addElement(item);
                    }
                    break;

                case "Flor":
                    FlorRepository florRepo = new FlorRepository();
                    List<Flor> flores = florRepo.findAll();
                    for (Flor item : flores) {
                        listModel.addElement(item);
                    }
                    break;

                case "Funcionário":
                    FuncionarioRepository funcionarioRepo = new FuncionarioRepository();
                    List<Funcionario> funcionarios = funcionarioRepo.findAll();
                    for (Funcionario item : funcionarios) {
                        listModel.addElement(item);
                    }
                    break;

                case "Pedido":
                    PedidoRepository pedidoRepo = new PedidoRepository();
                    List<Pedido> pedidos = pedidoRepo.findAll();
                    for (Pedido item : pedidos) {
                        listModel.addElement(item);
                    }
                    break;

                case "Tamanho Buquê":
                    TamanhoBuqueRepository tamanhoBuqueRepo = new TamanhoBuqueRepository();
                    List<TamanhoBuque> tamanhos = tamanhoBuqueRepo.findAll();
                    for (TamanhoBuque item : tamanhos) {
                        listModel.addElement(item);
                    }
                    break;

                default:
                    // Se a opção não for reconhecida, a lista permanecerá vazia.
                    break;
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao carregar dados: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Listagem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Listagem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Listagem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Listagem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Listagem().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JComboBox<String> comboxEntidade;
    private javax.swing.JPanel jPanel1;
    private JList<Object> listEntidade;
    private javax.swing.JScrollPane scrPnlListaEntidade;
    // End of variables declaration//GEN-END:variables
}
